
battleships.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003dc  00800200  00000730  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  008005dc  008005dc  00000ba0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f0b  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001045  00000000  00000000  00002c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a99  00000000  00000000  00003c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  00004734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000907  00000000  00000000  00004b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fbd  00000000  00000000  0000541f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000063dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	19 c1       	rjmp	.+562    	; 0x248 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	15 e0       	ldi	r17, 0x05	; 5
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e3       	ldi	r30, 0x30	; 48
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 3d       	cpi	r26, 0xDC	; 220
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	25 e0       	ldi	r18, 0x05	; 5
 110:	ac ed       	ldi	r26, 0xDC	; 220
 112:	b5 e0       	ldi	r27, 0x05	; 5
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 3f       	cpi	r26, 0xFE	; 254
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	db d0       	rcall	.+438    	; 0x2d6 <main>
 120:	05 c3       	rjmp	.+1546   	; 0x72c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <DrawText>:
		FillRectangle(0,i*tileHeight-5,320,5,0,0,0);		
	}
}


void DrawText(char *text, unsigned int startx, unsigned int starty, unsigned int size){
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	28 97       	sbiw	r28, 0x08	; 8
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	3c 01       	movw	r6, r24
 15a:	5e 83       	std	Y+6, r21	; 0x06
 15c:	4d 83       	std	Y+5, r20	; 0x05
 15e:	3c 83       	std	Y+4, r19	; 0x04
 160:	2b 83       	std	Y+3, r18	; 0x03
 162:	c9 01       	movw	r24, r18
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	9c 01       	movw	r18, r24
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	19 01       	movw	r2, r18
 178:	28 1a       	sub	r2, r24
 17a:	39 0a       	sbc	r3, r25
 17c:	7a 82       	std	Y+2, r7	; 0x02
 17e:	69 82       	std	Y+1, r6	; 0x01
	for(int i=0; i<strlen(text); i++){
 180:	6f 83       	std	Y+7, r22	; 0x07
 182:	78 87       	std	Y+8, r23	; 0x08
 184:	41 2c       	mov	r4, r1
 186:	51 2c       	mov	r5, r1
 188:	21 c0       	rjmp	.+66     	; 0x1cc <DrawText+0xa8>
		char *cx=getChar(*(text+i));
 18a:	e9 81       	ldd	r30, Y+1	; 0x01
 18c:	fa 81       	ldd	r31, Y+2	; 0x02
 18e:	81 91       	ld	r24, Z+
 190:	fa 83       	std	Y+2, r31	; 0x02
 192:	e9 83       	std	Y+1, r30	; 0x01
 194:	41 d0       	rcall	.+130    	; 0x218 <getChar>
		unsigned int start=startx+i*14*size;

		writeSymbol(cx, 0b00001111, 0b00011111, 0b00001111, start, starty, 16, 16, size);
 196:	8b 80       	ldd	r8, Y+3	; 0x03
 198:	9c 80       	ldd	r9, Y+4	; 0x04
 19a:	68 94       	set
 19c:	aa 24       	eor	r10, r10
 19e:	a4 f8       	bld	r10, 4
 1a0:	b1 2c       	mov	r11, r1
 1a2:	68 94       	set
 1a4:	cc 24       	eor	r12, r12
 1a6:	c4 f8       	bld	r12, 4
 1a8:	d1 2c       	mov	r13, r1
 1aa:	ed 80       	ldd	r14, Y+5	; 0x05
 1ac:	fe 80       	ldd	r15, Y+6	; 0x06
 1ae:	0f 81       	ldd	r16, Y+7	; 0x07
 1b0:	18 85       	ldd	r17, Y+8	; 0x08
 1b2:	2f e0       	ldi	r18, 0x0F	; 15
 1b4:	4f e1       	ldi	r20, 0x1F	; 31
 1b6:	6f e0       	ldi	r22, 0x0F	; 15
 1b8:	5a d1       	rcall	.+692    	; 0x46e <writeSymbol>
	}
}


void DrawText(char *text, unsigned int startx, unsigned int starty, unsigned int size){
	for(int i=0; i<strlen(text); i++){
 1ba:	ff ef       	ldi	r31, 0xFF	; 255
 1bc:	4f 1a       	sub	r4, r31
 1be:	5f 0a       	sbc	r5, r31
 1c0:	8f 81       	ldd	r24, Y+7	; 0x07
 1c2:	98 85       	ldd	r25, Y+8	; 0x08
 1c4:	82 0d       	add	r24, r2
 1c6:	93 1d       	adc	r25, r3
 1c8:	98 87       	std	Y+8, r25	; 0x08
 1ca:	8f 83       	std	Y+7, r24	; 0x07
 1cc:	f3 01       	movw	r30, r6
 1ce:	01 90       	ld	r0, Z+
 1d0:	00 20       	and	r0, r0
 1d2:	e9 f7       	brne	.-6      	; 0x1ce <DrawText+0xaa>
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	e6 19       	sub	r30, r6
 1d8:	f7 09       	sbc	r31, r7
 1da:	4e 16       	cp	r4, r30
 1dc:	5f 06       	cpc	r5, r31
 1de:	a8 f2       	brcs	.-86     	; 0x18a <DrawText+0x66>
		char *cx=getChar(*(text+i));
		unsigned int start=startx+i*14*size;

		writeSymbol(cx, 0b00001111, 0b00011111, 0b00001111, start, starty, 16, 16, size);
	}
	char *cx=getChar(*(text+0));
 1e0:	f3 01       	movw	r30, r6
 1e2:	80 81       	ld	r24, Z
 1e4:	19 d0       	rcall	.+50     	; 0x218 <getChar>

	//char *cx=getChar(*(text+0));
	//writeSymbol(cx, 0b00001111, 0b00011111, 0b00001111, startx, starty, 8, 8, 2);

 1e6:	28 96       	adiw	r28, 0x08	; 8
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	bf 90       	pop	r11
 204:	af 90       	pop	r10
 206:	9f 90       	pop	r9
 208:	8f 90       	pop	r8
 20a:	7f 90       	pop	r7
 20c:	6f 90       	pop	r6
 20e:	5f 90       	pop	r5
 210:	4f 90       	pop	r4
 212:	3f 90       	pop	r3
 214:	2f 90       	pop	r2
 216:	08 95       	ret

00000218 <getChar>:

char* numbers[11] = {code0, code1, code2, code3, code4, code5, code6, code7, code8, code9, codeColon};

char* getChar(char c)
{	
	if(c == 4 || c == 32)
 218:	84 30       	cpi	r24, 0x04	; 4
 21a:	69 f0       	breq	.+26     	; 0x236 <getChar+0x1e>
 21c:	80 32       	cpi	r24, 0x20	; 32
 21e:	71 f0       	breq	.+28     	; 0x23c <getChar+0x24>
	{
		char* res = code_space;
		return res;
	}
	if(c==248){
 220:	88 3f       	cpi	r24, 0xF8	; 248
 222:	79 f0       	breq	.+30     	; 0x242 <getChar+0x2a>
		char* res = code_oe;
		return res;
	}
	char* res = Characters[c-97];
 224:	e8 2f       	mov	r30, r24
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e2 5c       	subi	r30, 0xC2	; 194
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
 230:	80 81       	ld	r24, Z
 232:	91 81       	ldd	r25, Z+1	; 0x01
	return res;
 234:	08 95       	ret
char* getChar(char c)
{	
	if(c == 4 || c == 32)
	{
		char* res = code_space;
		return res;
 236:	8c ed       	ldi	r24, 0xDC	; 220
 238:	95 e0       	ldi	r25, 0x05	; 5
 23a:	08 95       	ret
 23c:	8c ed       	ldi	r24, 0xDC	; 220
 23e:	95 e0       	ldi	r25, 0x05	; 5
 240:	08 95       	ret
	}
	if(c==248){
		char* res = code_oe;
		return res;
 242:	8a e1       	ldi	r24, 0x1A	; 26
 244:	93 e0       	ldi	r25, 0x03	; 3
	}
	char* res = Characters[c-97];
	return res;
	//char *res=X;
	//return res;
}
 246:	08 95       	ret

00000248 <__vector_5>:
}

//INTERRUPTS RUTINES
// Interrupt service rutine for INT2
ISR (INT4_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	0b b6       	in	r0, 0x3b	; 59
 254:	0f 92       	push	r0
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	EIMSK &= ~(0b00010000);
 26e:	ec 98       	cbi	0x1d, 4	; 29
	DrawText("t",(i++)*16,(i++)*16,1);
 270:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <i>
 274:	90 91 fd 05 	lds	r25, 0x05FD	; 0x8005fd <i+0x1>
 278:	ac 01       	movw	r20, r24
 27a:	42 95       	swap	r20
 27c:	52 95       	swap	r21
 27e:	50 7f       	andi	r21, 0xF0	; 240
 280:	54 27       	eor	r21, r20
 282:	40 7f       	andi	r20, 0xF0	; 240
 284:	54 27       	eor	r21, r20
 286:	02 96       	adiw	r24, 0x02	; 2
 288:	90 93 fd 05 	sts	0x05FD, r25	; 0x8005fd <i+0x1>
 28c:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <i>
 290:	ba 01       	movw	r22, r20
 292:	60 5f       	subi	r22, 0xF0	; 240
 294:	7f 4f       	sbci	r23, 0xFF	; 255
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	8a ed       	ldi	r24, 0xDA	; 218
 29c:	95 e0       	ldi	r25, 0x05	; 5
 29e:	42 df       	rcall	.-380    	; 0x124 <DrawText>
	int dataX = readTouchXInput();
 2a0:	32 d2       	rcall	.+1124   	; 0x706 <readTouchXInput>
	int dataY = readTouchYInput();
 2a2:	3c d2       	rcall	.+1144   	; 0x71c <readTouchYInput>
 2a4:	ec 9a       	sbi	0x1d, 4	; 29
	EIMSK |= 0b00010000;
 2a6:	ff 91       	pop	r31

}
 2a8:	ef 91       	pop	r30
 2aa:	bf 91       	pop	r27
 2ac:	af 91       	pop	r26
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	7f 91       	pop	r23
 2b4:	6f 91       	pop	r22
 2b6:	5f 91       	pop	r21
 2b8:	4f 91       	pop	r20
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	0f 90       	pop	r0
 2c0:	0b be       	out	0x3b, r0	; 59
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <initIRQInterrupt>:
 2cc:	82 e0       	ldi	r24, 0x02	; 2


void initIRQInterrupt(){
	// INT4:Falling edge
	EICRB = 0b00000010;
 2ce:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	// Enable extern interrupt INT4
	EIMSK |= 0b00010000;
 2d2:	ec 9a       	sbi	0x1d, 4	; 29
 2d4:	08 95       	ret

000002d6 <main>:

int i = 0;

int main(void)
{	
	DisplayInit();
 2d6:	3a d0       	rcall	.+116    	; 0x34c <DisplayInit>
	initIRQInterrupt();
 2d8:	f9 df       	rcall	.-14     	; 0x2cc <initIRQInterrupt>
	sei(); // Global interrupt enable
	//DrawBackground();

	DisplayOn();
 2da:	78 94       	sei
 2dc:	1b d0       	rcall	.+54     	; 0x314 <DisplayOn>
    while (1) 
    {
		DisplayOn();
 2de:	1a d0       	rcall	.+52     	; 0x314 <DisplayOn>
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <main+0x8>

000002e2 <WriteCommand>:
 2e2:	5f 98       	cbi	0x0b, 7	; 11
		WritePixel(Red,Green,Blue);
	}
	
	WriteCommand(0);
	
}
 2e4:	a1 98       	cbi	0x14, 1	; 20
 2e6:	a2 98       	cbi	0x14, 2	; 20
 2e8:	00 00       	nop
 2ea:	88 b9       	out	0x08, r24	; 8
 2ec:	a2 9a       	sbi	0x14, 2	; 20
 2ee:	a1 9a       	sbi	0x14, 1	; 20
 2f0:	5f 9a       	sbi	0x0b, 7	; 11
 2f2:	8f e3       	ldi	r24, 0x3F	; 63
 2f4:	9f e1       	ldi	r25, 0x1F	; 31
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <WriteCommand+0x14>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <WriteCommand+0x1a>
 2fc:	00 00       	nop
 2fe:	08 95       	ret

00000300 <WriteData>:
 300:	5f 9a       	sbi	0x0b, 7	; 11
 302:	a1 98       	cbi	0x14, 1	; 20
 304:	a2 98       	cbi	0x14, 2	; 20
 306:	00 00       	nop
 308:	92 b9       	out	0x02, r25	; 2
 30a:	88 b9       	out	0x08, r24	; 8
 30c:	a2 9a       	sbi	0x14, 2	; 20
 30e:	a1 9a       	sbi	0x14, 1	; 20
 310:	5f 98       	cbi	0x0b, 7	; 11
 312:	08 95       	ret

00000314 <DisplayOn>:
 314:	89 e2       	ldi	r24, 0x29	; 41
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	e4 cf       	rjmp	.-56     	; 0x2e2 <WriteCommand>
 31a:	08 95       	ret

0000031c <SleepOut>:
 31c:	81 e1       	ldi	r24, 0x11	; 17
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	e0 cf       	rjmp	.-64     	; 0x2e2 <WriteCommand>
 322:	08 95       	ret

00000324 <MemoryAccessControl>:
 324:	cf 93       	push	r28
 326:	c8 2f       	mov	r28, r24
 328:	86 e3       	ldi	r24, 0x36	; 54
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	da df       	rcall	.-76     	; 0x2e2 <WriteCommand>
 32e:	8c 2f       	mov	r24, r28
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	e6 df       	rcall	.-52     	; 0x300 <WriteData>
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <InterfacePixelFormat>:
 338:	cf 93       	push	r28
 33a:	c8 2f       	mov	r28, r24
 33c:	8a e3       	ldi	r24, 0x3A	; 58
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	d0 df       	rcall	.-96     	; 0x2e2 <WriteCommand>
 342:	8c 2f       	mov	r24, r28
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	dc df       	rcall	.-72     	; 0x300 <WriteData>
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <DisplayInit>:
 34c:	9f ef       	ldi	r25, 0xFF	; 255
 34e:	91 b9       	out	0x01, r25	; 1
 350:	84 b1       	in	r24, 0x04	; 4
 352:	8f 60       	ori	r24, 0x0F	; 15
 354:	84 b9       	out	0x04, r24	; 4
 356:	83 b3       	in	r24, 0x13	; 19
 358:	87 60       	ori	r24, 0x07	; 7
 35a:	83 bb       	out	0x13, r24	; 19
 35c:	8b ef       	ldi	r24, 0xFB	; 251
 35e:	8a b9       	out	0x0a, r24	; 10
 360:	97 b9       	out	0x07, r25	; 7
 362:	6b 9a       	sbi	0x0d, 3	; 13
 364:	8d b1       	in	r24, 0x0d	; 13
 366:	8f 7c       	andi	r24, 0xCF	; 207
 368:	8d b9       	out	0x0d, r24	; 13
 36a:	e1 e0       	ldi	r30, 0x01	; 1
 36c:	f1 e0       	ldi	r31, 0x01	; 1
 36e:	80 81       	ld	r24, Z
 370:	88 60       	ori	r24, 0x08	; 8
 372:	80 83       	st	Z, r24
 374:	9d 9a       	sbi	0x13, 5	; 19
 376:	84 b3       	in	r24, 0x14	; 20
 378:	87 60       	ori	r24, 0x07	; 7
 37a:	84 bb       	out	0x14, r24	; 20
 37c:	5f 9a       	sbi	0x0b, 7	; 11
 37e:	a0 98       	cbi	0x14, 0	; 20
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	89 e6       	ldi	r24, 0x69	; 105
 384:	98 e1       	ldi	r25, 0x18	; 24
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <DisplayInit+0x3a>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <DisplayInit+0x44>
 390:	00 00       	nop
 392:	a0 9a       	sbi	0x14, 0	; 20
 394:	2f ef       	ldi	r18, 0xFF	; 255
 396:	88 e5       	ldi	r24, 0x58	; 88
 398:	96 e0       	ldi	r25, 0x06	; 6
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	80 40       	sbci	r24, 0x00	; 0
 39e:	90 40       	sbci	r25, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <DisplayInit+0x4e>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <DisplayInit+0x58>
 3a4:	00 00       	nop
 3a6:	ba df       	rcall	.-140    	; 0x31c <SleepOut>
 3a8:	b5 df       	rcall	.-150    	; 0x314 <DisplayOn>
 3aa:	88 e0       	ldi	r24, 0x08	; 8
 3ac:	bb df       	rcall	.-138    	; 0x324 <MemoryAccessControl>
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	c3 cf       	rjmp	.-122    	; 0x338 <InterfacePixelFormat>
 3b2:	08 95       	ret

000003b4 <MemoryWrite>:
 3b4:	8c e2       	ldi	r24, 0x2C	; 44
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	94 cf       	rjmp	.-216    	; 0x2e2 <WriteCommand>
 3ba:	08 95       	ret

000003bc <WritePixel>:
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	32 2f       	mov	r19, r18
 3c2:	22 27       	eor	r18, r18
 3c4:	33 0f       	add	r19, r19
 3c6:	33 0f       	add	r19, r19
 3c8:	33 0f       	add	r19, r19
 3ca:	50 e2       	ldi	r21, 0x20	; 32
 3cc:	65 9f       	mul	r22, r21
 3ce:	c0 01       	movw	r24, r0
 3d0:	11 24       	eor	r1, r1
 3d2:	84 2b       	or	r24, r20
 3d4:	82 2b       	or	r24, r18
 3d6:	93 2b       	or	r25, r19
 3d8:	93 cf       	rjmp	.-218    	; 0x300 <WriteData>
 3da:	08 95       	ret

000003dc <SetColumnAddress>:
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	86 17       	cp	r24, r22
 3e6:	97 07       	cpc	r25, r23
 3e8:	90 f4       	brcc	.+36     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3ea:	60 3f       	cpi	r22, 0xF0	; 240
 3ec:	71 05       	cpc	r23, r1
 3ee:	78 f4       	brcc	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f0:	eb 01       	movw	r28, r22
 3f2:	8c 01       	movw	r16, r24
 3f4:	8a e2       	ldi	r24, 0x2A	; 42
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	74 df       	rcall	.-280    	; 0x2e2 <WriteCommand>
 3fa:	81 2f       	mov	r24, r17
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	80 df       	rcall	.-256    	; 0x300 <WriteData>
 400:	c8 01       	movw	r24, r16
 402:	7e df       	rcall	.-260    	; 0x300 <WriteData>
 404:	8d 2f       	mov	r24, r29
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	7b df       	rcall	.-266    	; 0x300 <WriteData>
 40a:	ce 01       	movw	r24, r28
 40c:	79 df       	rcall	.-270    	; 0x300 <WriteData>
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <SetPageAddress>:
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	86 17       	cp	r24, r22
 422:	97 07       	cpc	r25, r23
 424:	98 f4       	brcc	.+38     	; 0x44c <SetPageAddress+0x34>
 426:	60 34       	cpi	r22, 0x40	; 64
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	72 07       	cpc	r23, r18
 42c:	78 f4       	brcc	.+30     	; 0x44c <SetPageAddress+0x34>
 42e:	eb 01       	movw	r28, r22
 430:	8c 01       	movw	r16, r24
 432:	8b e2       	ldi	r24, 0x2B	; 43
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	55 df       	rcall	.-342    	; 0x2e2 <WriteCommand>
 438:	81 2f       	mov	r24, r17
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	61 df       	rcall	.-318    	; 0x300 <WriteData>
 43e:	c8 01       	movw	r24, r16
 440:	5f df       	rcall	.-322    	; 0x300 <WriteData>
 442:	8d 2f       	mov	r24, r29
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	5c df       	rcall	.-328    	; 0x300 <WriteData>
 448:	ce 01       	movw	r24, r28
 44a:	5a df       	rcall	.-332    	; 0x300 <WriteData>
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <delayNop>:

void delayNop(int times){
	for (int i =0;i<times;i++){
 456:	18 16       	cp	r1, r24
 458:	19 06       	cpc	r1, r25
 45a:	44 f4       	brge	.+16     	; 0x46c <delayNop+0x16>
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	30 e0       	ldi	r19, 0x00	; 0
		_NOP();
 460:	00 00       	nop
	WriteCommand(0);
	
}

void delayNop(int times){
	for (int i =0;i<times;i++){
 462:	2f 5f       	subi	r18, 0xFF	; 255
 464:	3f 4f       	sbci	r19, 0xFF	; 255
 466:	82 17       	cp	r24, r18
 468:	93 07       	cpc	r25, r19
 46a:	d1 f7       	brne	.-12     	; 0x460 <delayNop+0xa>
 46c:	08 95       	ret

0000046e <writeSymbol>:

void writeSymbol(
char *data, unsigned char red, unsigned char green, unsigned char blue, 
unsigned int StartX, unsigned int StartY, unsigned int Width, unsigned int Height, 
unsigned int sizeMultiplier
){
 46e:	2f 92       	push	r2
 470:	3f 92       	push	r3
 472:	5f 92       	push	r5
 474:	6f 92       	push	r6
 476:	7f 92       	push	r7
 478:	8f 92       	push	r8
 47a:	9f 92       	push	r9
 47c:	af 92       	push	r10
 47e:	bf 92       	push	r11
 480:	cf 92       	push	r12
 482:	df 92       	push	r13
 484:	ef 92       	push	r14
 486:	ff 92       	push	r15
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	00 d0       	rcall	.+0      	; 0x492 <writeSymbol+0x24>
 492:	00 d0       	rcall	.+0      	; 0x494 <writeSymbol+0x26>
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	1c 01       	movw	r2, r24
 49a:	56 2e       	mov	r5, r22
 49c:	64 2e       	mov	r6, r20
 49e:	72 2e       	mov	r7, r18
 4a0:	c8 01       	movw	r24, r16
 4a2:	9c 82       	std	Y+4, r9	; 0x04
 4a4:	8b 82       	std	Y+3, r8	; 0x03
	SetPageAddress(StartX,(StartX + Width*sizeMultiplier)-1);
 4a6:	c8 9c       	mul	r12, r8
 4a8:	b0 01       	movw	r22, r0
 4aa:	c9 9c       	mul	r12, r9
 4ac:	70 0d       	add	r23, r0
 4ae:	d8 9c       	mul	r13, r8
 4b0:	70 0d       	add	r23, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	98 01       	movw	r18, r16
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	31 09       	sbc	r19, r1
 4ba:	62 0f       	add	r22, r18
 4bc:	73 1f       	adc	r23, r19
 4be:	ac df       	rcall	.-168    	; 0x418 <SetPageAddress>
	SetColumnAddress(StartY, (StartY + Height*sizeMultiplier)-1);
 4c0:	8b 80       	ldd	r8, Y+3	; 0x03
 4c2:	9c 80       	ldd	r9, Y+4	; 0x04
 4c4:	8a 9c       	mul	r8, r10
 4c6:	b0 01       	movw	r22, r0
 4c8:	8b 9c       	mul	r8, r11
 4ca:	70 0d       	add	r23, r0
 4cc:	9a 9c       	mul	r9, r10
 4ce:	70 0d       	add	r23, r0
 4d0:	11 24       	eor	r1, r1
 4d2:	c7 01       	movw	r24, r14
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	68 0f       	add	r22, r24
 4d8:	79 1f       	adc	r23, r25
 4da:	c7 01       	movw	r24, r14
	MemoryWrite();
 4dc:	7f df       	rcall	.-258    	; 0x3dc <SetColumnAddress>
 4de:	6a df       	rcall	.-300    	; 0x3b4 <MemoryWrite>
 4e0:	3a 82       	std	Y+2, r3	; 0x02
 4e2:	29 82       	std	Y+1, r2	; 0x01
 4e4:	91 01       	movw	r18, r2
 4e6:	20 5e       	subi	r18, 0xE0	; 224
 4e8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ea:	3e 83       	std	Y+6, r19	; 0x06
 4ec:	2d 83       	std	Y+5, r18	; 0x05
 4ee:	0b 81       	ldd	r16, Y+3	; 0x03
 4f0:	1c 81       	ldd	r17, Y+4	; 0x04
		
	
	for (int i = 0;i<16;i++){
		char cfirst=*(data+(i*2));
 4f2:	e9 81       	ldd	r30, Y+1	; 0x01
 4f4:	fa 81       	ldd	r31, Y+2	; 0x02
 4f6:	a0 80       	ld	r10, Z
		char csecond=*(data+((i*2)+1));
 4f8:	81 80       	ldd	r8, Z+1	; 0x01
		for(int q=0;q<sizeMultiplier;q++){
 4fa:	2b 81       	ldd	r18, Y+3	; 0x03
 4fc:	3c 81       	ldd	r19, Y+4	; 0x04
 4fe:	23 2b       	or	r18, r19
 500:	09 f4       	brne	.+2      	; 0x504 <writeSymbol+0x96>
 502:	62 c0       	rjmp	.+196    	; 0x5c8 <writeSymbol+0x15a>
 504:	21 2c       	mov	r2, r1
 506:	31 2c       	mov	r3, r1
			for (int j=0;j<8;j++){
				char off= cfirst<<j;
 508:	b1 2c       	mov	r11, r1
						WritePixel(0, 0, 0);
					}
				}
			}
			for (int p=0;p<8;p++){
				char off= csecond<<p;
 50a:	91 2c       	mov	r9, r1
 50c:	5a c0       	rjmp	.+180    	; 0x5c2 <writeSymbol+0x154>
	for (int i = 0;i<16;i++){
		char cfirst=*(data+(i*2));
		char csecond=*(data+((i*2)+1));
		for(int q=0;q<sizeMultiplier;q++){
			for (int j=0;j<8;j++){
				char off= cfirst<<j;
 50e:	c5 01       	movw	r24, r10
 510:	0c 2c       	mov	r0, r12
 512:	02 c0       	rjmp	.+4      	; 0x518 <writeSymbol+0xaa>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <writeSymbol+0xa6>
				off&=0b10000000;
				if(off == 0)
 51c:	88 23       	and	r24, r24
 51e:	6c f0       	brlt	.+26     	; 0x53a <writeSymbol+0xcc>
 520:	e1 2c       	mov	r14, r1
 522:	f1 2c       	mov	r15, r1
				{
					for(int size=0;size<sizeMultiplier;size++){
						WritePixel(red, green, blue);
 524:	47 2d       	mov	r20, r7
 526:	66 2d       	mov	r22, r6
 528:	85 2d       	mov	r24, r5
 52a:	48 df       	rcall	.-368    	; 0x3bc <WritePixel>
			for (int j=0;j<8;j++){
				char off= cfirst<<j;
				off&=0b10000000;
				if(off == 0)
				{
					for(int size=0;size<sizeMultiplier;size++){
 52c:	3f ef       	ldi	r19, 0xFF	; 255
 52e:	e3 1a       	sub	r14, r19
 530:	f3 0a       	sbc	r15, r19
 532:	e0 16       	cp	r14, r16
 534:	f1 06       	cpc	r15, r17
 536:	b1 f7       	brne	.-20     	; 0x524 <writeSymbol+0xb6>
 538:	0c c0       	rjmp	.+24     	; 0x552 <writeSymbol+0xe4>
 53a:	e1 2c       	mov	r14, r1
						WritePixel(red, green, blue);
					}
				
				} else {
					for(int size=0;size<sizeMultiplier;size++){
						WritePixel(0, 0, 0);
 53c:	f1 2c       	mov	r15, r1
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	3b df       	rcall	.-394    	; 0x3bc <WritePixel>
					for(int size=0;size<sizeMultiplier;size++){
						WritePixel(red, green, blue);
					}
				
				} else {
					for(int size=0;size<sizeMultiplier;size++){
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	e8 1a       	sub	r14, r24
 54a:	f8 0a       	sbc	r15, r24
 54c:	e0 16       	cp	r14, r16
 54e:	f1 06       	cpc	r15, r17
 550:	b1 f7       	brne	.-20     	; 0x53e <writeSymbol+0xd0>
	
	for (int i = 0;i<16;i++){
		char cfirst=*(data+(i*2));
		char csecond=*(data+((i*2)+1));
		for(int q=0;q<sizeMultiplier;q++){
			for (int j=0;j<8;j++){
 552:	9f ef       	ldi	r25, 0xFF	; 255
 554:	c9 1a       	sub	r12, r25
 556:	d9 0a       	sbc	r13, r25
 558:	e8 e0       	ldi	r30, 0x08	; 8
 55a:	ce 16       	cp	r12, r30
 55c:	d1 04       	cpc	r13, r1
 55e:	b9 f6       	brne	.-82     	; 0x50e <writeSymbol+0xa0>
 560:	c1 2c       	mov	r12, r1
 562:	d1 2c       	mov	r13, r1
						WritePixel(0, 0, 0);
					}
				}
			}
			for (int p=0;p<8;p++){
				char off= csecond<<p;
 564:	c4 01       	movw	r24, r8
 566:	0c 2c       	mov	r0, r12
 568:	02 c0       	rjmp	.+4      	; 0x56e <writeSymbol+0x100>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	0a 94       	dec	r0
 570:	e2 f7       	brpl	.-8      	; 0x56a <writeSymbol+0xfc>
				off&=0b10000000;
				if(off == 0)
 572:	88 23       	and	r24, r24
 574:	6c f0       	brlt	.+26     	; 0x590 <writeSymbol+0x122>
 576:	e1 2c       	mov	r14, r1
				{
					for(int size=0;size<sizeMultiplier;size++){
						WritePixel(red, green, blue);
 578:	f1 2c       	mov	r15, r1
 57a:	47 2d       	mov	r20, r7
 57c:	66 2d       	mov	r22, r6
 57e:	85 2d       	mov	r24, r5
 580:	1d df       	rcall	.-454    	; 0x3bc <WritePixel>
			for (int p=0;p<8;p++){
				char off= csecond<<p;
				off&=0b10000000;
				if(off == 0)
				{
					for(int size=0;size<sizeMultiplier;size++){
 582:	ff ef       	ldi	r31, 0xFF	; 255
 584:	ef 1a       	sub	r14, r31
 586:	ff 0a       	sbc	r15, r31
 588:	e0 16       	cp	r14, r16
 58a:	f1 06       	cpc	r15, r17
 58c:	b1 f7       	brne	.-20     	; 0x57a <writeSymbol+0x10c>
 58e:	0c c0       	rjmp	.+24     	; 0x5a8 <writeSymbol+0x13a>
 590:	e1 2c       	mov	r14, r1
						WritePixel(red, green, blue);
					}
								
					} else {
					for(int size=0;size<sizeMultiplier;size++){
						WritePixel(0, 0, 0);
 592:	f1 2c       	mov	r15, r1
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	10 df       	rcall	.-480    	; 0x3bc <WritePixel>
					for(int size=0;size<sizeMultiplier;size++){
						WritePixel(red, green, blue);
					}
								
					} else {
					for(int size=0;size<sizeMultiplier;size++){
 59c:	2f ef       	ldi	r18, 0xFF	; 255
 59e:	e2 1a       	sub	r14, r18
 5a0:	f2 0a       	sbc	r15, r18
 5a2:	e0 16       	cp	r14, r16
 5a4:	f1 06       	cpc	r15, r17
 5a6:	b1 f7       	brne	.-20     	; 0x594 <writeSymbol+0x126>
					for(int size=0;size<sizeMultiplier;size++){
						WritePixel(0, 0, 0);
					}
				}
			}
			for (int p=0;p<8;p++){
 5a8:	3f ef       	ldi	r19, 0xFF	; 255
 5aa:	c3 1a       	sub	r12, r19
 5ac:	d3 0a       	sbc	r13, r19
 5ae:	88 e0       	ldi	r24, 0x08	; 8
 5b0:	c8 16       	cp	r12, r24
 5b2:	d1 04       	cpc	r13, r1
 5b4:	b9 f6       	brne	.-82     	; 0x564 <writeSymbol+0xf6>
		
	
	for (int i = 0;i<16;i++){
		char cfirst=*(data+(i*2));
		char csecond=*(data+((i*2)+1));
		for(int q=0;q<sizeMultiplier;q++){
 5b6:	9f ef       	ldi	r25, 0xFF	; 255
 5b8:	29 1a       	sub	r2, r25
 5ba:	39 0a       	sbc	r3, r25
 5bc:	20 16       	cp	r2, r16
 5be:	31 06       	cpc	r3, r17
 5c0:	19 f0       	breq	.+6      	; 0x5c8 <writeSymbol+0x15a>

void writeSymbol(
char *data, unsigned char red, unsigned char green, unsigned char blue, 
unsigned int StartX, unsigned int StartY, unsigned int Width, unsigned int Height, 
unsigned int sizeMultiplier
){
 5c2:	c1 2c       	mov	r12, r1
 5c4:	d1 2c       	mov	r13, r1
 5c6:	a3 cf       	rjmp	.-186    	; 0x50e <writeSymbol+0xa0>
 5c8:	e9 81       	ldd	r30, Y+1	; 0x01
 5ca:	fa 81       	ldd	r31, Y+2	; 0x02
 5cc:	32 96       	adiw	r30, 0x02	; 2
 5ce:	fa 83       	std	Y+2, r31	; 0x02
 5d0:	e9 83       	std	Y+1, r30	; 0x01
	SetPageAddress(StartX,(StartX + Width*sizeMultiplier)-1);
	SetColumnAddress(StartY, (StartY + Height*sizeMultiplier)-1);
	MemoryWrite();
		
	
	for (int i = 0;i<16;i++){
 5d2:	2d 81       	ldd	r18, Y+5	; 0x05
 5d4:	3e 81       	ldd	r19, Y+6	; 0x06
 5d6:	2e 17       	cp	r18, r30
 5d8:	3f 07       	cpc	r19, r31
 5da:	09 f0       	breq	.+2      	; 0x5de <writeSymbol+0x170>
				}
			}
		}		
	}

	WriteCommand(0);
 5dc:	8a cf       	rjmp	.-236    	; 0x4f2 <writeSymbol+0x84>
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	7f de       	rcall	.-770    	; 0x2e2 <WriteCommand>

}
 5e4:	26 96       	adiw	r28, 0x06	; 6
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	f8 94       	cli
 5ea:	de bf       	out	0x3e, r29	; 62
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	cd bf       	out	0x3d, r28	; 61
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	ff 90       	pop	r15
 5fa:	ef 90       	pop	r14
 5fc:	df 90       	pop	r13
 5fe:	cf 90       	pop	r12
 600:	bf 90       	pop	r11
 602:	af 90       	pop	r10
 604:	9f 90       	pop	r9
 606:	8f 90       	pop	r8
 608:	7f 90       	pop	r7
 60a:	6f 90       	pop	r6
 60c:	5f 90       	pop	r5
 60e:	3f 90       	pop	r3
 610:	2f 90       	pop	r2
 612:	08 95       	ret

00000614 <writeTouchData>:

void writeTouchData(unsigned int data){
 614:	ef 92       	push	r14
 616:	ff 92       	push	r15
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	8c 01       	movw	r16, r24
	
	CLK_PORT &= ~(1<<CLK_BIT); //Sets CLK low
 622:	e2 e0       	ldi	r30, 0x02	; 2
 624:	f1 e0       	ldi	r31, 0x01	; 1
 626:	80 81       	ld	r24, Z
 628:	87 7f       	andi	r24, 0xF7	; 247
 62a:	80 83       	st	Z, r24
	CS_TOUCH_PORT &= ~(1<<CS_TOUCH_BIT); //Sets CS low
 62c:	73 98       	cbi	0x0e, 3	; 14
	delayNop(3); //minimum 100ns
 62e:	83 e0       	ldi	r24, 0x03	; 3
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	11 df       	rcall	.-478    	; 0x456 <delayNop>
	for (int i=0;i<8;i++){
 634:	e1 2c       	mov	r14, r1
 636:	f1 2c       	mov	r15, r1
		PORTG |= (data<<i & 0b10000000)>>2; //Sets D_IN
		CLK_PORT |= 1<<CLK_BIT; //Sets CLK high
 638:	c2 e0       	ldi	r28, 0x02	; 2
 63a:	d1 e0       	ldi	r29, 0x01	; 1
	
	CLK_PORT &= ~(1<<CLK_BIT); //Sets CLK low
	CS_TOUCH_PORT &= ~(1<<CS_TOUCH_BIT); //Sets CS low
	delayNop(3); //minimum 100ns
	for (int i=0;i<8;i++){
		PORTG |= (data<<i & 0b10000000)>>2; //Sets D_IN
 63c:	24 b3       	in	r18, 0x14	; 20
 63e:	c8 01       	movw	r24, r16
 640:	0e 2c       	mov	r0, r14
 642:	02 c0       	rjmp	.+4      	; 0x648 <writeTouchData+0x34>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	0a 94       	dec	r0
 64a:	e2 f7       	brpl	.-8      	; 0x644 <writeTouchData+0x30>
 64c:	80 78       	andi	r24, 0x80	; 128
 64e:	99 27       	eor	r25, r25
 650:	96 95       	lsr	r25
 652:	87 95       	ror	r24
 654:	96 95       	lsr	r25
 656:	87 95       	ror	r24
 658:	82 2b       	or	r24, r18
 65a:	84 bb       	out	0x14, r24	; 20
		CLK_PORT |= 1<<CLK_BIT; //Sets CLK high
 65c:	88 81       	ld	r24, Y
 65e:	88 60       	ori	r24, 0x08	; 8
 660:	88 83       	st	Y, r24
		delayNop(6); //min 200ns
 662:	86 e0       	ldi	r24, 0x06	; 6
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	f7 de       	rcall	.-530    	; 0x456 <delayNop>
		CLK_PORT &= ~(1<<CLK_BIT); //Sets CLK low
 668:	88 81       	ld	r24, Y
 66a:	87 7f       	andi	r24, 0xF7	; 247
 66c:	88 83       	st	Y, r24
		delayNop(6); //min 200ns
 66e:	86 e0       	ldi	r24, 0x06	; 6
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	f1 de       	rcall	.-542    	; 0x456 <delayNop>
void writeTouchData(unsigned int data){
	
	CLK_PORT &= ~(1<<CLK_BIT); //Sets CLK low
	CS_TOUCH_PORT &= ~(1<<CS_TOUCH_BIT); //Sets CS low
	delayNop(3); //minimum 100ns
	for (int i=0;i<8;i++){
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	e8 1a       	sub	r14, r24
 678:	f8 0a       	sbc	r15, r24
 67a:	88 e0       	ldi	r24, 0x08	; 8
 67c:	e8 16       	cp	r14, r24
 67e:	f1 04       	cpc	r15, r1
 680:	e9 f6       	brne	.-70     	; 0x63c <writeTouchData+0x28>
		CLK_PORT |= 1<<CLK_BIT; //Sets CLK high
		delayNop(6); //min 200ns
		CLK_PORT &= ~(1<<CLK_BIT); //Sets CLK low
		delayNop(6); //min 200ns
	}
}
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	1f 91       	pop	r17
 688:	0f 91       	pop	r16
 68a:	ff 90       	pop	r15
 68c:	ef 90       	pop	r14
 68e:	08 95       	ret

00000690 <readTouchData>:

unsigned int readTouchData(){
 690:	cf 92       	push	r12
 692:	df 92       	push	r13
 694:	ef 92       	push	r14
 696:	ff 92       	push	r15
 698:	0f 93       	push	r16
 69a:	1f 93       	push	r17
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
	unsigned int data = 0;
	for (int i=0;i<12;i++){
 6a0:	e1 2c       	mov	r14, r1
 6a2:	f1 2c       	mov	r15, r1
		delayNop(6); //min 200ns
	}
}

unsigned int readTouchData(){
	unsigned int data = 0;
 6a4:	c0 e0       	ldi	r28, 0x00	; 0
 6a6:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0;i<12;i++){
		data = data<<i;
		CLK_PORT |= (1<<CLK_BIT); //Sets CLK high 
 6a8:	02 e0       	ldi	r16, 0x02	; 2
 6aa:	11 e0       	ldi	r17, 0x01	; 1
}

unsigned int readTouchData(){
	unsigned int data = 0;
	for (int i=0;i<12;i++){
		data = data<<i;
 6ac:	0e 2c       	mov	r0, r14
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <readTouchData+0x24>
 6b0:	cc 0f       	add	r28, r28
 6b2:	dd 1f       	adc	r29, r29
 6b4:	0a 94       	dec	r0
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <readTouchData+0x20>
		CLK_PORT |= (1<<CLK_BIT); //Sets CLK high 
 6b8:	f8 01       	movw	r30, r16
 6ba:	80 81       	ld	r24, Z
 6bc:	88 60       	ori	r24, 0x08	; 8
 6be:	80 83       	st	Z, r24
		delayNop(6); // minimum 200ns
 6c0:	86 e0       	ldi	r24, 0x06	; 6
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	c8 de       	rcall	.-624    	; 0x456 <delayNop>
		CLK_PORT |= (1<<CLK_BIT); //Sets CLK low
 6c6:	f8 01       	movw	r30, r16
 6c8:	80 81       	ld	r24, Z
 6ca:	88 60       	ori	r24, 0x08	; 8
 6cc:	80 83       	st	Z, r24
		data |=  (0b00000001 & (DOUT_PORT>>DOUT_BIT));
 6ce:	8e b1       	in	r24, 0x0e	; 14
 6d0:	85 fb       	bst	r24, 5
 6d2:	cc 24       	eor	r12, r12
 6d4:	c0 f8       	bld	r12, 0
 6d6:	d1 2c       	mov	r13, r1
 6d8:	cc 29       	or	r28, r12
 6da:	dd 29       	or	r29, r13
		delayNop(5); //(minimum 200ns)
 6dc:	85 e0       	ldi	r24, 0x05	; 5
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	ba de       	rcall	.-652    	; 0x456 <delayNop>
	}
}

unsigned int readTouchData(){
	unsigned int data = 0;
	for (int i=0;i<12;i++){
 6e2:	ff ef       	ldi	r31, 0xFF	; 255
 6e4:	ef 1a       	sub	r14, r31
 6e6:	ff 0a       	sbc	r15, r31
 6e8:	8c e0       	ldi	r24, 0x0C	; 12
 6ea:	e8 16       	cp	r14, r24
 6ec:	f1 04       	cpc	r15, r1
 6ee:	f1 f6       	brne	.-68     	; 0x6ac <readTouchData+0x1c>
		delayNop(6); // minimum 200ns
		CLK_PORT |= (1<<CLK_BIT); //Sets CLK low
		data |=  (0b00000001 & (DOUT_PORT>>DOUT_BIT));
		delayNop(5); //(minimum 200ns)
	}
	CS_TOUCH_PORT &= ~(1<<CS_TOUCH_BIT);
 6f0:	73 98       	cbi	0x0e, 3	; 14
	return data;
}
 6f2:	ce 01       	movw	r24, r28
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	08 95       	ret

00000706 <readTouchXInput>:

unsigned int readTouchXInput()
{
	unsigned int getXData = 0x90;
	writeTouchData(getXData);
 706:	80 e9       	ldi	r24, 0x90	; 144
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	84 df       	rcall	.-248    	; 0x614 <writeTouchData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 70c:	8f e3       	ldi	r24, 0x3F	; 63
 70e:	9f e1       	ldi	r25, 0x1F	; 31
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <readTouchXInput+0xa>
 714:	00 c0       	rjmp	.+0      	; 0x716 <readTouchXInput+0x10>
	_delay_ms(2); //Busy wait
	return readTouchData();
 716:	00 00       	nop
 718:	bb cf       	rjmp	.-138    	; 0x690 <readTouchData>
}
 71a:	08 95       	ret

0000071c <readTouchYInput>:

unsigned int readTouchYInput()
{
	unsigned int getYData = 0xD0;
	writeTouchData(getYData);
 71c:	80 ed       	ldi	r24, 0xD0	; 208
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	79 df       	rcall	.-270    	; 0x614 <writeTouchData>
	delayNop(8);
 722:	88 e0       	ldi	r24, 0x08	; 8
 724:	90 e0       	ldi	r25, 0x00	; 0
	return readTouchData();
 726:	97 de       	rcall	.-722    	; 0x456 <delayNop>
 728:	b3 cf       	rjmp	.-154    	; 0x690 <readTouchData>
}
 72a:	08 95       	ret

0000072c <_exit>:
 72c:	f8 94       	cli

0000072e <__stop_program>:
 72e:	ff cf       	rjmp	.-2      	; 0x72e <__stop_program>
