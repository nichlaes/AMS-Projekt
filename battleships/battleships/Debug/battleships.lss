
battleships.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001710  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000eb9  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a9  00000000  00000000  00002c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f8  00000000  00000000  00003524  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000743  00000000  00000000  0000381c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a00  00000000  00000000  00003f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  0000495f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	ac c0       	rjmp	.+344    	; 0x16e <__vector_5>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	32 d0       	rcall	.+100    	; 0x15a <main>
  f6:	f8 c1       	rjmp	.+1008   	; 0x4e8 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <DrawBackground>:
#define tileWidth 64
#define tileHeight 60
#define displayWidth 320
#define displayHeight 240

void DrawBackground(){
  fa:	cf 92       	push	r12
  fc:	ef 92       	push	r14
  fe:	0f 93       	push	r16
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cc e3       	ldi	r28, 0x3C	; 60
 106:	d0 e0       	ldi	r29, 0x00	; 0
	int xTiles = displayWidth/tileWidth;
	int yTiles = displayHeight/tileHeight;
	
	for (unsigned int i = 1; i < xTiles+1; i++)
	{
		FillRectangle(i*tileWidth-4,0,4,240,0,0,0);
 108:	c1 2c       	mov	r12, r1
 10a:	e1 2c       	mov	r14, r1
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	20 ef       	ldi	r18, 0xF0	; 240
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	44 e0       	ldi	r20, 0x04	; 4
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	ce 01       	movw	r24, r28
 11c:	ff d0       	rcall	.+510    	; 0x31c <FillRectangle>
 11e:	c0 5c       	subi	r28, 0xC0	; 192
 120:	df 4f       	sbci	r29, 0xFF	; 255

void DrawBackground(){
	int xTiles = displayWidth/tileWidth;
	int yTiles = displayHeight/tileHeight;
	
	for (unsigned int i = 1; i < xTiles+1; i++)
 122:	cc 37       	cpi	r28, 0x7C	; 124
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	d8 07       	cpc	r29, r24
 128:	79 f7       	brne	.-34     	; 0x108 <DrawBackground+0xe>
 12a:	cb ef       	ldi	r28, 0xFB	; 251
 12c:	df ef       	ldi	r29, 0xFF	; 255
	{
		FillRectangle(i*tileWidth-4,0,4,240,0,0,0);
	}
	for (unsigned int i = 0; i < yTiles+1; i++)
	{
		FillRectangle(0,i*tileHeight-5,320,5,0,0,0);		
 12e:	c1 2c       	mov	r12, r1
 130:	e1 2c       	mov	r14, r1
 132:	00 e0       	ldi	r16, 0x00	; 0
 134:	25 e0       	ldi	r18, 0x05	; 5
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e4       	ldi	r20, 0x40	; 64
 13a:	51 e0       	ldi	r21, 0x01	; 1
 13c:	be 01       	movw	r22, r28
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	ec d0       	rcall	.+472    	; 0x31c <FillRectangle>
 144:	ec 96       	adiw	r28, 0x3c	; 60
	
	for (unsigned int i = 1; i < xTiles+1; i++)
	{
		FillRectangle(i*tileWidth-4,0,4,240,0,0,0);
	}
	for (unsigned int i = 0; i < yTiles+1; i++)
 146:	c7 32       	cpi	r28, 0x27	; 39
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	d8 07       	cpc	r29, r24
 14c:	81 f7       	brne	.-32     	; 0x12e <DrawBackground+0x34>
	{
		FillRectangle(0,i*tileHeight-5,320,5,0,0,0);		
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	0f 91       	pop	r16
 154:	ef 90       	pop	r14
 156:	cf 90       	pop	r12
 158:	08 95       	ret

0000015a <main>:
#include "TFTdriver.h"
#include "Draw.h"

int main(void)
{	
	DisplayInit();
 15a:	6c d0       	rcall	.+216    	; 0x234 <DisplayInit>
	DrawBackground();
 15c:	ce df       	rcall	.-100    	; 0xfa <DrawBackground>
	DisplayOn();
 15e:	4e d0       	rcall	.+156    	; 0x1fc <DisplayOn>
 160:	82 e0       	ldi	r24, 0x02	; 2
	// INT4:Falling edge
	EICRB = 0b00000010;
 162:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	// Enable extern interrupt INT4
	EIMSK |= 0b00010000;
 166:	ec 9a       	sbi	0x1d, 4	; 29
	sei(); // Global interrupt enable
 168:	78 94       	sei
    while (1) 
    {
		DisplayOn();
 16a:	48 d0       	rcall	.+144    	; 0x1fc <DisplayOn>
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x10>

0000016e <__vector_5>:
 16e:	1f 92       	push	r1
}

//INTERRUPTS RUTINES
// Interrupt service rutine for INT2
ISR (INT4_vect)
{
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	0b b6       	in	r0, 0x3b	; 59
 17a:	0f 92       	push	r0
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	EIMSK &= ~(0b00010000);
 194:	ec 98       	cbi	0x1d, 4	; 29
	DisplayOff();
 196:	2e d0       	rcall	.+92     	; 0x1f4 <DisplayOff>
	unsigned int data = readTouchInput();
 198:	92 d1       	rcall	.+804    	; 0x4be <readTouchInput>
 19a:	ec 9a       	sbi	0x1d, 4	; 29
	EIMSK |= 0b00010000;
 19c:	ff 91       	pop	r31

}
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0b be       	out	0x3b, r0	; 59
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <WriteCommand>:
 1c2:	5f 98       	cbi	0x0b, 7	; 11
		SetColumnAddress(0,31);
		
	for(unsigned long int i=0;i<size;i++ ){
		WritePixel(red, green,blue);
	}
}
 1c4:	a1 98       	cbi	0x14, 1	; 20
 1c6:	a2 98       	cbi	0x14, 2	; 20
 1c8:	00 00       	nop
 1ca:	88 b9       	out	0x08, r24	; 8
 1cc:	a2 9a       	sbi	0x14, 2	; 20
 1ce:	a1 9a       	sbi	0x14, 1	; 20
 1d0:	5f 9a       	sbi	0x0b, 7	; 11
 1d2:	8f e3       	ldi	r24, 0x3F	; 63
 1d4:	9f e1       	ldi	r25, 0x1F	; 31
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <WriteCommand+0x14>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <WriteCommand+0x1a>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <WriteData>:
 1e0:	5f 9a       	sbi	0x0b, 7	; 11
 1e2:	a1 98       	cbi	0x14, 1	; 20
 1e4:	a2 98       	cbi	0x14, 2	; 20
 1e6:	00 00       	nop
 1e8:	92 b9       	out	0x02, r25	; 2
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	a2 9a       	sbi	0x14, 2	; 20
 1ee:	a1 9a       	sbi	0x14, 1	; 20
 1f0:	5f 98       	cbi	0x0b, 7	; 11
 1f2:	08 95       	ret

000001f4 <DisplayOff>:
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	e4 cf       	rjmp	.-56     	; 0x1c2 <WriteCommand>
 1fa:	08 95       	ret

000001fc <DisplayOn>:
 1fc:	89 e2       	ldi	r24, 0x29	; 41
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	e0 cf       	rjmp	.-64     	; 0x1c2 <WriteCommand>
 202:	08 95       	ret

00000204 <SleepOut>:
 204:	81 e1       	ldi	r24, 0x11	; 17
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	dc cf       	rjmp	.-72     	; 0x1c2 <WriteCommand>
 20a:	08 95       	ret

0000020c <MemoryAccessControl>:
 20c:	cf 93       	push	r28
 20e:	c8 2f       	mov	r28, r24
 210:	86 e3       	ldi	r24, 0x36	; 54
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	d6 df       	rcall	.-84     	; 0x1c2 <WriteCommand>
 216:	8c 2f       	mov	r24, r28
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	e2 df       	rcall	.-60     	; 0x1e0 <WriteData>
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <InterfacePixelFormat>:
 220:	cf 93       	push	r28
 222:	c8 2f       	mov	r28, r24
 224:	8a e3       	ldi	r24, 0x3A	; 58
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	cc df       	rcall	.-104    	; 0x1c2 <WriteCommand>
 22a:	8c 2f       	mov	r24, r28
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	d8 df       	rcall	.-80     	; 0x1e0 <WriteData>
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <DisplayInit>:
 234:	9f ef       	ldi	r25, 0xFF	; 255
 236:	91 b9       	out	0x01, r25	; 1
 238:	84 b1       	in	r24, 0x04	; 4
 23a:	8f 60       	ori	r24, 0x0F	; 15
 23c:	84 b9       	out	0x04, r24	; 4
 23e:	83 b3       	in	r24, 0x13	; 19
 240:	87 60       	ori	r24, 0x07	; 7
 242:	83 bb       	out	0x13, r24	; 19
 244:	57 9a       	sbi	0x0a, 7	; 10
 246:	97 b9       	out	0x07, r25	; 7
 248:	6b 9a       	sbi	0x0d, 3	; 13
 24a:	8d b1       	in	r24, 0x0d	; 13
 24c:	8f 7c       	andi	r24, 0xCF	; 207
 24e:	8d b9       	out	0x0d, r24	; 13
 250:	e1 e0       	ldi	r30, 0x01	; 1
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	80 81       	ld	r24, Z
 256:	88 60       	ori	r24, 0x08	; 8
 258:	80 83       	st	Z, r24
 25a:	9d 9a       	sbi	0x13, 5	; 19
 25c:	84 b3       	in	r24, 0x14	; 20
 25e:	87 60       	ori	r24, 0x07	; 7
 260:	84 bb       	out	0x14, r24	; 20
 262:	5f 9a       	sbi	0x0b, 7	; 11
 264:	a0 98       	cbi	0x14, 0	; 20
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	89 e6       	ldi	r24, 0x69	; 105
 26a:	98 e1       	ldi	r25, 0x18	; 24
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <DisplayInit+0x38>
 274:	00 c0       	rjmp	.+0      	; 0x276 <DisplayInit+0x42>
 276:	00 00       	nop
 278:	a0 9a       	sbi	0x14, 0	; 20
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	88 e5       	ldi	r24, 0x58	; 88
 27e:	96 e0       	ldi	r25, 0x06	; 6
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <DisplayInit+0x4c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <DisplayInit+0x56>
 28a:	00 00       	nop
 28c:	bb df       	rcall	.-138    	; 0x204 <SleepOut>
 28e:	b6 df       	rcall	.-148    	; 0x1fc <DisplayOn>
 290:	88 e0       	ldi	r24, 0x08	; 8
 292:	bc df       	rcall	.-136    	; 0x20c <MemoryAccessControl>
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	c4 cf       	rjmp	.-120    	; 0x220 <InterfacePixelFormat>
 298:	08 95       	ret

0000029a <MemoryWrite>:
 29a:	8c e2       	ldi	r24, 0x2C	; 44
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	91 cf       	rjmp	.-222    	; 0x1c2 <WriteCommand>
 2a0:	08 95       	ret

000002a2 <SetColumnAddress>:
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	86 17       	cp	r24, r22
 2ac:	97 07       	cpc	r25, r23
 2ae:	90 f4       	brcc	.+36     	; 0x2d4 <SetColumnAddress+0x32>
 2b0:	60 3f       	cpi	r22, 0xF0	; 240
 2b2:	71 05       	cpc	r23, r1
 2b4:	78 f4       	brcc	.+30     	; 0x2d4 <SetColumnAddress+0x32>
 2b6:	eb 01       	movw	r28, r22
 2b8:	8c 01       	movw	r16, r24
 2ba:	8a e2       	ldi	r24, 0x2A	; 42
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	81 df       	rcall	.-254    	; 0x1c2 <WriteCommand>
 2c0:	81 2f       	mov	r24, r17
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	8d df       	rcall	.-230    	; 0x1e0 <WriteData>
 2c6:	c8 01       	movw	r24, r16
 2c8:	8b df       	rcall	.-234    	; 0x1e0 <WriteData>
 2ca:	8d 2f       	mov	r24, r29
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	88 df       	rcall	.-240    	; 0x1e0 <WriteData>
 2d0:	ce 01       	movw	r24, r28
 2d2:	86 df       	rcall	.-244    	; 0x1e0 <WriteData>
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <SetPageAddress>:
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	86 17       	cp	r24, r22
 2e8:	97 07       	cpc	r25, r23
 2ea:	98 f4       	brcc	.+38     	; 0x312 <SetPageAddress+0x34>
 2ec:	60 34       	cpi	r22, 0x40	; 64
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	72 07       	cpc	r23, r18
 2f2:	78 f4       	brcc	.+30     	; 0x312 <SetPageAddress+0x34>
 2f4:	eb 01       	movw	r28, r22
 2f6:	8c 01       	movw	r16, r24
 2f8:	8b e2       	ldi	r24, 0x2B	; 43
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	62 df       	rcall	.-316    	; 0x1c2 <WriteCommand>
 2fe:	81 2f       	mov	r24, r17
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	6e df       	rcall	.-292    	; 0x1e0 <WriteData>
 304:	c8 01       	movw	r24, r16
 306:	6c df       	rcall	.-296    	; 0x1e0 <WriteData>
 308:	8d 2f       	mov	r24, r29
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	69 df       	rcall	.-302    	; 0x1e0 <WriteData>
 30e:	ce 01       	movw	r24, r28
 310:	67 df       	rcall	.-306    	; 0x1e0 <WriteData>
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret

0000031c <FillRectangle>:
 31c:	8f 92       	push	r8
 31e:	9f 92       	push	r9
 320:	af 92       	push	r10
 322:	bf 92       	push	r11
 324:	cf 92       	push	r12
 326:	df 92       	push	r13
 328:	ef 92       	push	r14
 32a:	ff 92       	push	r15
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	eb 01       	movw	r28, r22
 336:	5a 01       	movw	r10, r20
 338:	49 01       	movw	r8, r18
 33a:	ba 01       	movw	r22, r20
 33c:	61 50       	subi	r22, 0x01	; 1
 33e:	71 09       	sbc	r23, r1
 340:	68 0f       	add	r22, r24
 342:	79 1f       	adc	r23, r25
 344:	cc df       	rcall	.-104    	; 0x2de <SetPageAddress>
 346:	b4 01       	movw	r22, r8
 348:	61 50       	subi	r22, 0x01	; 1
 34a:	71 09       	sbc	r23, r1
 34c:	6c 0f       	add	r22, r28
 34e:	7d 1f       	adc	r23, r29
 350:	ce 01       	movw	r24, r28
 352:	a7 df       	rcall	.-178    	; 0x2a2 <SetColumnAddress>
 354:	a2 df       	rcall	.-188    	; 0x29a <MemoryWrite>
 356:	94 01       	movw	r18, r8
 358:	d5 01       	movw	r26, r10
 35a:	b7 d0       	rcall	.+366    	; 0x4ca <__umulhisi3>
 35c:	61 15       	cp	r22, r1
 35e:	71 05       	cpc	r23, r1
 360:	81 05       	cpc	r24, r1
 362:	91 05       	cpc	r25, r1
 364:	f9 f0       	breq	.+62     	; 0x3a4 <FillRectangle+0x88>
 366:	10 e0       	ldi	r17, 0x00	; 0
 368:	98 01       	movw	r18, r16
 36a:	32 2f       	mov	r19, r18
 36c:	22 27       	eor	r18, r18
 36e:	33 0f       	add	r19, r19
 370:	33 0f       	add	r19, r19
 372:	33 0f       	add	r19, r19
 374:	40 e2       	ldi	r20, 0x20	; 32
 376:	e4 9e       	mul	r14, r20
 378:	80 01       	movw	r16, r0
 37a:	11 24       	eor	r1, r1
 37c:	0c 29       	or	r16, r12
 37e:	02 2b       	or	r16, r18
 380:	13 2b       	or	r17, r19
 382:	4b 01       	movw	r8, r22
 384:	5c 01       	movw	r10, r24
 386:	c1 2c       	mov	r12, r1
 388:	d1 2c       	mov	r13, r1
 38a:	76 01       	movw	r14, r12
 38c:	c8 01       	movw	r24, r16
 38e:	28 df       	rcall	.-432    	; 0x1e0 <WriteData>
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	c8 1a       	sub	r12, r24
 394:	d8 0a       	sbc	r13, r24
 396:	e8 0a       	sbc	r14, r24
 398:	f8 0a       	sbc	r15, r24
 39a:	c8 14       	cp	r12, r8
 39c:	d9 04       	cpc	r13, r9
 39e:	ea 04       	cpc	r14, r10
 3a0:	fb 04       	cpc	r15, r11
 3a2:	a1 f7       	brne	.-24     	; 0x38c <FillRectangle+0x70>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0c df       	rcall	.-488    	; 0x1c2 <WriteCommand>
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	bf 90       	pop	r11
 3bc:	af 90       	pop	r10
 3be:	9f 90       	pop	r9
 3c0:	8f 90       	pop	r8
 3c2:	08 95       	ret

000003c4 <delayNop>:
 3c4:	18 16       	cp	r1, r24
 3c6:	19 06       	cpc	r1, r25
 3c8:	44 f4       	brge	.+16     	; 0x3da <delayNop+0x16>
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	00 00       	nop
 3d0:	2f 5f       	subi	r18, 0xFF	; 255
 3d2:	3f 4f       	sbci	r19, 0xFF	; 255
 3d4:	82 17       	cp	r24, r18
 3d6:	93 07       	cpc	r25, r19
 3d8:	d1 f7       	brne	.-12     	; 0x3ce <delayNop+0xa>
 3da:	08 95       	ret

000003dc <writeTouchData>:

void writeTouchData(unsigned int data){
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	8c 01       	movw	r16, r24
	PORTH &= ~(1<<3); //Sets CLK low
 3ea:	e2 e0       	ldi	r30, 0x02	; 2
 3ec:	f1 e0       	ldi	r31, 0x01	; 1
 3ee:	80 81       	ld	r24, Z
 3f0:	87 7f       	andi	r24, 0xF7	; 247
 3f2:	80 83       	st	Z, r24
	PORTE &= 0b11110111; //Sets CS low
 3f4:	73 98       	cbi	0x0e, 3	; 14
	delayNop(3);
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	e4 df       	rcall	.-56     	; 0x3c4 <delayNop>
	for (int i=0;i<8;i++){
 3fc:	e1 2c       	mov	r14, r1
 3fe:	f1 2c       	mov	r15, r1
		PORTG |= (data<<i & 0b10000000)>>2; //Sets D_IN
		PORTH |= 1<<3; //Sets CLK high
 400:	c2 e0       	ldi	r28, 0x02	; 2
 402:	d1 e0       	ldi	r29, 0x01	; 1
void writeTouchData(unsigned int data){
	PORTH &= ~(1<<3); //Sets CLK low
	PORTE &= 0b11110111; //Sets CS low
	delayNop(3);
	for (int i=0;i<8;i++){
		PORTG |= (data<<i & 0b10000000)>>2; //Sets D_IN
 404:	24 b3       	in	r18, 0x14	; 20
 406:	c8 01       	movw	r24, r16
 408:	0e 2c       	mov	r0, r14
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	80 78       	andi	r24, 0x80	; 128
 416:	99 27       	eor	r25, r25
 418:	96 95       	lsr	r25
 41a:	87 95       	ror	r24
 41c:	96 95       	lsr	r25
 41e:	87 95       	ror	r24
 420:	82 2b       	or	r24, r18
 422:	84 bb       	out	0x14, r24	; 20
		PORTH |= 1<<3; //Sets CLK high
 424:	88 81       	ld	r24, Y
 426:	88 60       	ori	r24, 0x08	; 8
 428:	88 83       	st	Y, r24
		delayNop(6); //delay min 200ns
 42a:	86 e0       	ldi	r24, 0x06	; 6
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	ca df       	rcall	.-108    	; 0x3c4 <delayNop>
		PORTH &= ~(1<<3); //Sets CLK low
 430:	88 81       	ld	r24, Y
 432:	87 7f       	andi	r24, 0xF7	; 247
 434:	88 83       	st	Y, r24

void writeTouchData(unsigned int data){
	PORTH &= ~(1<<3); //Sets CLK low
	PORTE &= 0b11110111; //Sets CS low
	delayNop(3);
	for (int i=0;i<8;i++){
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	e8 1a       	sub	r14, r24
 43a:	f8 0a       	sbc	r15, r24
 43c:	88 e0       	ldi	r24, 0x08	; 8
 43e:	e8 16       	cp	r14, r24
 440:	f1 04       	cpc	r15, r1
 442:	01 f7       	brne	.-64     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		PORTG |= (data<<i & 0b10000000)>>2; //Sets D_IN
		PORTH |= 1<<3; //Sets CLK high
		delayNop(6); //delay min 200ns
		PORTH &= ~(1<<3); //Sets CLK low
	}
}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	ff 90       	pop	r15
 44e:	ef 90       	pop	r14
 450:	08 95       	ret

00000452 <pulseCLK>:
		data |=  (0b00000001 & (PORTE>>5));
	}
	return data;
}

void pulseCLK(){
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
	PORTH &= 1<<3; //Sets CLK high
 456:	c2 e0       	ldi	r28, 0x02	; 2
 458:	d1 e0       	ldi	r29, 0x01	; 1
 45a:	88 81       	ld	r24, Y
 45c:	88 70       	andi	r24, 0x08	; 8
 45e:	88 83       	st	Y, r24
	delayNop(1);
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	af df       	rcall	.-162    	; 0x3c4 <delayNop>
	PORTH &= ~(1<<3); //Sets CLK low
 466:	88 81       	ld	r24, Y
 468:	87 7f       	andi	r24, 0xF7	; 247
 46a:	88 83       	st	Y, r24
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <readTouchData>:
		delayNop(6); //delay min 200ns
		PORTH &= ~(1<<3); //Sets CLK low
	}
}

unsigned int readTouchData(){
 472:	ef 92       	push	r14
 474:	ff 92       	push	r15
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
	unsigned int data = 0;
	for (int i=0;i<12;i++){
 47e:	00 e0       	ldi	r16, 0x00	; 0
 480:	10 e0       	ldi	r17, 0x00	; 0
		PORTH &= ~(1<<3); //Sets CLK low
	}
}

unsigned int readTouchData(){
	unsigned int data = 0;
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0;i<12;i++){
		data = data<<i;
 486:	ec 01       	movw	r28, r24
 488:	00 2e       	mov	r0, r16
 48a:	02 c0       	rjmp	.+4      	; 0x490 <readTouchData+0x1e>
 48c:	cc 0f       	add	r28, r28
 48e:	dd 1f       	adc	r29, r29
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <readTouchData+0x1a>
		pulseCLK();
 494:	de df       	rcall	.-68     	; 0x452 <pulseCLK>
		data |=  (0b00000001 & (PORTE>>5));
 496:	8e b1       	in	r24, 0x0e	; 14
 498:	85 fb       	bst	r24, 5
 49a:	ee 24       	eor	r14, r14
 49c:	e0 f8       	bld	r14, 0
 49e:	f1 2c       	mov	r15, r1
 4a0:	c7 01       	movw	r24, r14
 4a2:	8c 2b       	or	r24, r28
 4a4:	9d 2b       	or	r25, r29
	}
}

unsigned int readTouchData(){
	unsigned int data = 0;
	for (int i=0;i<12;i++){
 4a6:	0f 5f       	subi	r16, 0xFF	; 255
 4a8:	1f 4f       	sbci	r17, 0xFF	; 255
 4aa:	0c 30       	cpi	r16, 0x0C	; 12
 4ac:	11 05       	cpc	r17, r1
 4ae:	59 f7       	brne	.-42     	; 0x486 <readTouchData+0x14>
		data = data<<i;
		pulseCLK();
		data |=  (0b00000001 & (PORTE>>5));
	}
	return data;
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	08 95       	ret

000004be <readTouchInput>:
}

unsigned int readTouchInput()
{
	unsigned char controlbit = 0b10001000;
	writeTouchData(controlbit);
 4be:	88 e8       	ldi	r24, 0x88	; 136
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	8c df       	rcall	.-232    	; 0x3dc <writeTouchData>
	pulseCLK(); //Busy wait
 4c4:	c6 df       	rcall	.-116    	; 0x452 <pulseCLK>
	return readTouchData();
 4c6:	d5 cf       	rjmp	.-86     	; 0x472 <readTouchData>
 4c8:	08 95       	ret

000004ca <__umulhisi3>:
}
 4ca:	a2 9f       	mul	r26, r18
 4cc:	b0 01       	movw	r22, r0
 4ce:	b3 9f       	mul	r27, r19
 4d0:	c0 01       	movw	r24, r0
 4d2:	a3 9f       	mul	r26, r19
 4d4:	70 0d       	add	r23, r0
 4d6:	81 1d       	adc	r24, r1
 4d8:	11 24       	eor	r1, r1
 4da:	91 1d       	adc	r25, r1
 4dc:	b2 9f       	mul	r27, r18
 4de:	70 0d       	add	r23, r0
 4e0:	81 1d       	adc	r24, r1
 4e2:	11 24       	eor	r1, r1
 4e4:	91 1d       	adc	r25, r1
 4e6:	08 95       	ret

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
